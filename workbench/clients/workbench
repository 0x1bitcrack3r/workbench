#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""Workbench CLI Client"""
import os
import pprint
import hashlib
import zerorpc
import workbench.clients.workbench_client as workbench_client

def run():
    ''' Running the workbench CLI ''' 
    
    # Grab arguments
    args = workbench_client.grab_server_args()

    # Start up workbench connection
    workbench = zerorpc.Client(timeout=300, heartbeat=60)
    workbench.connect('tcp://'+args['server']+':'+args['port'])

    # If no command than assume they want help
    if not args['commands']:
        args['commands'] = ['help']

    # Check to see if the command is valid if it's not assume they want a 'work_request'
    command = args['commands'][0]
    if command in workbench.list_all_commands():
        parameters = args['commands'][1:]
    else:
        command = 'work_request'
        parameters = args['commands']

    # Do they want 'store_sample'?
    if command == 'store_sample':
        file_path = parameters[0]

        # Do they want everything under a directory?
        if os.path.isdir(file_path):
            file_list = [os.path.join(file_path, child) for child in os.listdir(file_path)]
        else:
            file_list = [file_path]
        
        # Upload the files into workbench
        for path in file_list:
            with open(path, 'rb') as my_file:
                raw_bytes = my_file.read()
                md5 = hashlib.md5(raw_bytes).hexdigest()
                if not workbench.has_sample(md5):
                    print 'Storing Sample...'
                    md5 = workbench.store_sample(os.path.basename(path), raw_bytes, 'unknown')
                else:
                    print 'Sample already in Workbench...'
                print md5

    # Okay send the command and any optional parameters to workbench
    else:
        output = workbench(command, *parameters)
    
        # Pretty print the output
        if isinstance(output, str):
            print output
        else:
            pprint.pprint(output)


if __name__ == '__main__':
    run()
